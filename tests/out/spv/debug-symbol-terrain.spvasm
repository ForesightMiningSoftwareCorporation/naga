; SPIR-V
; Version: 1.1
; Generator: rspirv
; Bound: 652
OpCapability Shader
OpExtension "SPV_KHR_storage_buffer_storage_class"
%1 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %355 "gen_terrain_compute" %352
OpEntryPoint Vertex %422 "gen_terrain_vertex" %413 %416 %418 %420
OpEntryPoint Fragment %474 "gen_terrain_fragment" %464 %466 %469 %472 %473
OpEntryPoint Vertex %565 "vs_main" %556 %559 %561 %562 %564
OpEntryPoint Fragment %592 "fs_main" %585 %587 %589 %591
OpExecutionMode %355 LocalSize 64 1 1
OpExecutionMode %474 OriginUpperLeft
OpExecutionMode %592 OriginUpperLeft
%3 = OpString "debug-symbol-terrain"
OpSource Unknown 0 %3 "// Taken from https://github.com/sotrh/learn-wgpu/blob/11820796f5e1dbce42fb1119f04ddeb4b167d2a0/code/intermediate/tutorial13-terrain/src/terrain.wgsl
// ============================
// Terrain Generation
// ============================

// https://gist.github.com/munrocket/236ed5ba7e409b8bdf1ff6eca5dcdc39
//  MIT License. Â© Ian McEwan, Stefan Gustavson, Munrocket
// - Less condensed glsl implementation with comments can be found at https://weber.itn.liu.se/~stegu/jgt2012/article.pdf

fn permute3(x: vec3<f32>) -> vec3<f32> { return (((x * 34.) + 1.) * x) % vec3<f32>(289.); }

fn snoise2(v: vec2<f32>) -> f32 {
    let C = vec4<f32>(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    var i: vec2<f32> = floor(v + dot(v, C.yy));
    let x0 = v - i + dot(i, C.xx);
    // I flipped the condition here from > to < as it fixed some artifacting I was observing
    var i1: vec2<f32> = select(vec2<f32>(1., 0.), vec2<f32>(0., 1.), (x0.x < x0.y));
    var x12: vec4<f32> = x0.xyxy + C.xxzz - vec4<f32>(i1, 0., 0.);
    i = i % vec2<f32>(289.);
    let p = permute3(permute3(i.y + vec3<f32>(0., i1.y, 1.)) + i.x + vec3<f32>(0., i1.x, 1.));
    var m: vec3<f32> = max(0.5 - vec3<f32>(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), vec3<f32>(0.));
    m = m * m;
    m = m * m;
    let x = 2. * fract(p * C.www) - 1.;
    let h = abs(x) - 0.5;
    let ox = floor(x + 0.5);
    let a0 = x - ox;
    m = m * (1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h));
    let g = vec3<f32>(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw);
    return 130. * dot(m, g);
}


fn fbm(p: vec2<f32>) -> f32 {
    let NUM_OCTAVES: u32 = 5u;
    var x = p * 0.01;
    var v = 0.0;
    var a = 0.5;
    let shift = vec2<f32>(100.0);
    let cs = vec2<f32>(cos(0.5), sin(0.5));
    let rot = mat2x2<f32>(cs.x, cs.y, -cs.y, cs.x);

    for (var i = 0u; i < NUM_OCTAVES; i = i + 1u) {
        v = v + a * snoise2(x);
        x = rot * x * 2.0 + shift;
        a = a * 0.5;
    }

    return v;
}

struct ChunkData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
}

struct Vertex {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
}

struct VertexBuffer {
    data: array<Vertex>, // stride: 32
}

struct IndexBuffer {
    data: array<u32>,
}

@group(0) @binding(0) var<uniform> chunk_data: ChunkData;
@group(0) @binding(1) var<storage, read_write> vertices: VertexBuffer;
@group(0) @binding(2) var<storage, read_write> indices: IndexBuffer;

fn terrain_point(p: vec2<f32>, min_max_height: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        p.x,
        mix(min_max_height.x, min_max_height.y, fbm(p)),
        p.y,
    );
}

fn terrain_vertex(p: vec2<f32>, min_max_height: vec2<f32>) -> Vertex {
    let v = terrain_point(p, min_max_height);

    let tpx = terrain_point(p + vec2<f32>(0.1, 0.0), min_max_height) - v;
    let tpz = terrain_point(p + vec2<f32>(0.0, 0.1), min_max_height) - v;
    let tnx = terrain_point(p + vec2<f32>(-0.1, 0.0), min_max_height) - v;
    let tnz = terrain_point(p + vec2<f32>(0.0, -0.1), min_max_height) - v;

    let pn = normalize(cross(tpz, tpx));
    let nn = normalize(cross(tnz, tnx));

    let n = (pn + nn) * 0.5;

    return Vertex(v, n);
}

fn index_to_p(vert_index: u32, chunk_size: vec2<u32>, chunk_corner: vec2<i32>) -> vec2<f32> {
    return vec2(
        f32(vert_index) % f32(chunk_size.x + 1u),
        f32(vert_index / (chunk_size.x + 1u)),
    ) + vec2<f32>(chunk_corner);
}

@compute @workgroup_size(64)
fn gen_terrain_compute(
    @builtin(global_invocation_id) gid: vec3<u32>
) {
    // Create vert_component
    let vert_index = gid.x;

    let p = index_to_p(vert_index, chunk_data.chunk_size, chunk_data.chunk_corner);

    vertices.data[vert_index] = terrain_vertex(p, chunk_data.min_max_height);

    // Create indices
    let start_index = gid.x * 6u; // using TriangleList

    if (start_index >= (chunk_data.chunk_size.x * chunk_data.chunk_size.y * 6u)) { return; }

    let v00 = vert_index + gid.x / chunk_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + chunk_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    indices.data[start_index] = v00;
    indices.data[start_index + 1u] = v01;
    indices.data[start_index + 2u] = v11;
    indices.data[start_index + 3u] = v00;
    indices.data[start_index + 4u] = v11;
    indices.data[start_index + 5u] = v10;
}

// ============================
// Terrain Gen (Fragment Shader)
// ============================

struct GenData {
    chunk_size: vec2<u32>,
    chunk_corner: vec2<i32>,
    min_max_height: vec2<f32>,
    texture_size: u32,
    start_index: u32,
}
@group(0)
@binding(0)
var<uniform> gen_data: GenData;

struct GenVertexOutput {
    @location(0)
    index: u32,
    @builtin(position)
    position: vec4<f32>,
    @location(1)
    uv: vec2<f32>,
};

@vertex
fn gen_terrain_vertex(@builtin(vertex_index) vindex: u32) -> GenVertexOutput {
    let u = f32(((vindex + 2u) / 3u) % 2u);
    let v = f32(((vindex + 1u) / 3u) % 2u);
    let uv = vec2<f32>(u, v);

    let position = vec4<f32>(-1.0 + uv * 2.0, 0.0, 1.0);

    // TODO: maybe replace this with u32(dot(uv, vec2(f32(gen_data.texture_dim.x))))
    let index = u32(uv.x * f32(gen_data.texture_size) + uv.y * f32(gen_data.texture_size)) + gen_data.start_index;

    return GenVertexOutput(index, position, uv);
}


struct GenFragmentOutput {
    @location(0) vert_component: u32,
    @location(1) index: u32,
}

@fragment
fn gen_terrain_fragment(in: GenVertexOutput) -> GenFragmentOutput {
    let i = u32(in.uv.x * f32(gen_data.texture_size) + in.uv.y * f32(gen_data.texture_size * gen_data.texture_size)) + gen_data.start_index;
    let vert_index = u32(floor(f32(i) / 6.));
    let comp_index = i % 6u;

    let p = index_to_p(vert_index, gen_data.chunk_size, gen_data.chunk_corner);
    let v = terrain_vertex(p, gen_data.min_max_height);

    var vert_component: f32 = 0.;
    
    switch comp_index {
        case 0u: { vert_component = v.position.x; }
        case 1u: { vert_component = v.position.y; }
        case 2u: { vert_component = v.position.z; }
        case 3u: { vert_component = v.normal.x; }
        case 4u: { vert_component = v.normal.y; }
        case 5u: { vert_component = v.normal.z; }
        default: {}
    }

    let v00 = vert_index + vert_index / gen_data.chunk_size.x;
    let v10 = v00 + 1u;
    let v01 = v00 + gen_data.chunk_size.x + 1u;
    let v11 = v01 + 1u;

    var index = 0u;
    switch comp_index {
        case 0u, 3u: { index = v00; }
        case 2u, 4u: { index = v11; }
        case 1u: { index = v01; }
        case 5u: { index = v10; }
        default: {}
    }
    index = in.index;
    // index = gen_data.start_index;
    // indices.data[start_index] = v00;
    // indices.data[start_index + 1u] = v01;
    // indices.data[start_index + 2u] = v11;
    // indices.data[start_index + 3u] = v00;
    // indices.data[start_index + 4u] = v11;
    // indices.data[start_index + 5u] = v10;

    let ivert_component = bitcast<u32>(vert_component);
    return GenFragmentOutput(ivert_component, index);
}

// ============================
// Terrain Rendering
// ============================

struct Camera {
    view_pos: vec4<f32>,
    view_proj: mat4x4<f32>,
}
@group(0) @binding(0)
var<uniform> camera: Camera;

struct Light {
    position: vec3<f32>,
    color: vec3<f32>,
}
@group(1) @binding(0)
var<uniform> light: Light;

struct VertexOutput {
    @builtin(position) clip_position: vec4<f32>,
    @location(0) normal: vec3<f32>,
    @location(1) world_pos: vec3<f32>,
}

@vertex
fn vs_main(
    vertex: Vertex,
) -> VertexOutput {
    let clip_position = camera.view_proj * vec4<f32>(vertex.position, 1.);
    let normal = vertex.normal;
    return VertexOutput(clip_position, normal, vertex.position);
}

@group(2) @binding(0)
var t_diffuse: texture_2d<f32>;
@group(2) @binding(1)
var s_diffuse: sampler;
@group(2) @binding(2)
var t_normal: texture_2d<f32>;
@group(2) @binding(3)
var s_normal: sampler;

fn color23(p: vec2<f32>) -> vec3<f32> {
    return vec3<f32>(
        snoise2(p) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(23., 32.)) * 0.5 + 0.5,
        snoise2(p + vec2<f32>(-43., 3.)) * 0.5 + 0.5,
    );
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var color = smoothstep(vec3<f32>(0.0), vec3<f32>(0.1), fract(in.world_pos));
    color = mix(vec3<f32>(0.5, 0.1, 0.7), vec3<f32>(0.2, 0.2, 0.2), vec3<f32>(color.x * color.y * color.z));

    let ambient_strength = 0.1;
    let ambient_color = light.color * ambient_strength;

    let light_dir = normalize(light.position - in.world_pos);
    let view_dir = normalize(camera.view_pos.xyz - in.world_pos);
    let half_dir = normalize(view_dir + light_dir);

    let diffuse_strength = max(dot(in.normal, light_dir), 0.0);
    let diffuse_color = diffuse_strength * light.color;

    let specular_strength = pow(max(dot(in.normal, half_dir), 0.0), 32.0);
    let specular_color = specular_strength * light.color;

    let result = (ambient_color + diffuse_color + specular_color) * color;

    return vec4<f32>(result, 1.0);
}"
OpMemberName %13 0 "chunk_size"
OpMemberName %13 1 "chunk_corner"
OpMemberName %13 2 "min_max_height"
OpName %13 "ChunkData"
OpMemberName %14 0 "position"
OpMemberName %14 1 "normal"
OpName %14 "Vertex"
OpMemberName %16 0 "data"
OpName %16 "VertexBuffer"
OpMemberName %18 0 "data"
OpName %18 "IndexBuffer"
OpMemberName %20 0 "chunk_size"
OpMemberName %20 1 "chunk_corner"
OpMemberName %20 2 "min_max_height"
OpMemberName %20 3 "texture_size"
OpMemberName %20 4 "start_index"
OpName %20 "GenData"
OpMemberName %21 0 "index"
OpMemberName %21 1 "position"
OpMemberName %21 2 "uv"
OpName %21 "GenVertexOutput"
OpMemberName %22 0 "vert_component"
OpMemberName %22 1 "index"
OpName %22 "GenFragmentOutput"
OpMemberName %24 0 "view_pos"
OpMemberName %24 1 "view_proj"
OpName %24 "Camera"
OpMemberName %25 0 "position"
OpMemberName %25 1 "color"
OpName %25 "Light"
OpMemberName %26 0 "clip_position"
OpMemberName %26 1 "normal"
OpMemberName %26 2 "world_pos"
OpName %26 "VertexOutput"
OpName %40 "chunk_data"
OpName %43 "vertices"
OpName %45 "indices"
OpName %47 "gen_data"
OpName %50 "camera"
OpName %53 "light"
OpName %56 "t_diffuse"
OpName %58 "s_diffuse"
OpName %60 "t_normal"
OpName %61 "s_normal"
OpName %63 "x"
OpName %64 "permute3"
OpName %76 "i"
OpName %79 "i1"
OpName %81 "x12"
OpName %84 "m"
OpName %88 "v"
OpName %89 "snoise2"
OpName %214 "x"
OpName %216 "v"
OpName %219 "a"
OpName %221 "i"
OpName %225 "p"
OpName %226 "fbm"
OpName %265 "p"
OpName %266 "min_max_height"
OpName %267 "terrain_point"
OpName %278 "p"
OpName %279 "min_max_height"
OpName %280 "terrain_vertex"
OpName %310 "vert_index"
OpName %311 "chunk_size"
OpName %312 "chunk_corner"
OpName %313 "index_to_p"
OpName %329 "p"
OpName %330 "color23"
OpName %352 "gid"
OpName %355 "gen_terrain_compute"
OpName %413 "vindex"
OpName %416 "index"
OpName %418 "position"
OpName %420 "uv"
OpName %422 "gen_terrain_vertex"
OpName %458 "vert_component"
OpName %460 "index"
OpName %464 "index"
OpName %466 "position"
OpName %469 "uv"
OpName %472 "vert_component"
OpName %473 "index"
OpName %474 "gen_terrain_fragment"
OpName %556 "position"
OpName %559 "normal"
OpName %561 "clip_position"
OpName %562 "normal"
OpName %564 "world_pos"
OpName %565 "vs_main"
OpName %581 "color"
OpName %585 "clip_position"
OpName %587 "normal"
OpName %589 "world_pos"
OpName %592 "fs_main"
OpMemberDecorate %13 0 Offset 0
OpMemberDecorate %13 1 Offset 8
OpMemberDecorate %13 2 Offset 16
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 16
OpDecorate %15 ArrayStride 32
OpMemberDecorate %16 0 Offset 0
OpDecorate %17 ArrayStride 4
OpMemberDecorate %18 0 Offset 0
OpMemberDecorate %20 0 Offset 0
OpMemberDecorate %20 1 Offset 8
OpMemberDecorate %20 2 Offset 16
OpMemberDecorate %20 3 Offset 24
OpMemberDecorate %20 4 Offset 28
OpMemberDecorate %21 0 Offset 0
OpMemberDecorate %21 1 Offset 16
OpMemberDecorate %21 2 Offset 32
OpMemberDecorate %22 0 Offset 0
OpMemberDecorate %22 1 Offset 4
OpMemberDecorate %24 0 Offset 0
OpMemberDecorate %24 1 Offset 16
OpMemberDecorate %24 1 ColMajor
OpMemberDecorate %24 1 MatrixStride 16
OpMemberDecorate %25 0 Offset 0
OpMemberDecorate %25 1 Offset 16
OpMemberDecorate %26 0 Offset 0
OpMemberDecorate %26 1 Offset 16
OpMemberDecorate %26 2 Offset 32
OpDecorate %40 DescriptorSet 0
OpDecorate %40 Binding 0
OpDecorate %41 Block
OpMemberDecorate %41 0 Offset 0
OpDecorate %43 DescriptorSet 0
OpDecorate %43 Binding 1
OpDecorate %16 Block
OpDecorate %45 DescriptorSet 0
OpDecorate %45 Binding 2
OpDecorate %18 Block
OpDecorate %47 DescriptorSet 0
OpDecorate %47 Binding 0
OpDecorate %48 Block
OpMemberDecorate %48 0 Offset 0
OpDecorate %50 DescriptorSet 0
OpDecorate %50 Binding 0
OpDecorate %51 Block
OpMemberDecorate %51 0 Offset 0
OpDecorate %53 DescriptorSet 1
OpDecorate %53 Binding 0
OpDecorate %54 Block
OpMemberDecorate %54 0 Offset 0
OpDecorate %56 DescriptorSet 2
OpDecorate %56 Binding 0
OpDecorate %58 DescriptorSet 2
OpDecorate %58 Binding 1
OpDecorate %60 DescriptorSet 2
OpDecorate %60 Binding 2
OpDecorate %61 DescriptorSet 2
OpDecorate %61 Binding 3
OpDecorate %352 BuiltIn GlobalInvocationId
OpDecorate %413 BuiltIn VertexIndex
OpDecorate %416 Location 0
OpDecorate %416 Flat
OpDecorate %418 BuiltIn Position
OpDecorate %420 Location 1
OpDecorate %464 Location 0
OpDecorate %464 Flat
OpDecorate %466 BuiltIn FragCoord
OpDecorate %469 Location 1
OpDecorate %472 Location 0
OpDecorate %473 Location 1
OpDecorate %556 Location 0
OpDecorate %559 Location 1
OpDecorate %561 BuiltIn Position
OpDecorate %562 Location 0
OpDecorate %564 Location 1
OpDecorate %585 BuiltIn FragCoord
OpDecorate %587 Location 0
OpDecorate %589 Location 1
OpDecorate %591 Location 0
%2 = OpTypeVoid
%5 = OpTypeFloat 32
%4 = OpTypeVector %5 3
%6 = OpTypeVector %5 2
%7 = OpTypeVector %5 4
%8 = OpTypeInt 32 0
%9 = OpTypeMatrix %6 2
%10 = OpTypeVector %8 2
%12 = OpTypeInt 32 1
%11 = OpTypeVector %12 2
%13 = OpTypeStruct %10 %11 %6
%14 = OpTypeStruct %4 %4
%15 = OpTypeRuntimeArray %14
%16 = OpTypeStruct %15
%17 = OpTypeRuntimeArray %8
%18 = OpTypeStruct %17
%19 = OpTypeVector %8 3
%20 = OpTypeStruct %10 %11 %6 %8 %8
%21 = OpTypeStruct %8 %7 %6
%22 = OpTypeStruct %8 %8
%23 = OpTypeMatrix %7 4
%24 = OpTypeStruct %7 %23
%25 = OpTypeStruct %4 %4
%26 = OpTypeStruct %7 %4 %4
%27 = OpTypeImage %5 2D 0 0 0 1 Unknown
%28 = OpTypeSampler
%29 = OpConstant  %12  0
%30 = OpConstant  %12  1
%31 = OpConstant  %12  2
%32 = OpConstant  %12  64
%33 = OpConstant  %8  0
%34 = OpConstant  %8  1
%35 = OpConstant  %8  2
%36 = OpConstant  %8  3
%37 = OpConstant  %8  4
%38 = OpConstant  %8  5
%39 = OpConstant  %12  3
%41 = OpTypeStruct %13
%42 = OpTypePointer Uniform %41
%40 = OpVariable  %42  Uniform
%44 = OpTypePointer StorageBuffer %16
%43 = OpVariable  %44  StorageBuffer
%46 = OpTypePointer StorageBuffer %18
%45 = OpVariable  %46  StorageBuffer
%48 = OpTypeStruct %20
%49 = OpTypePointer Uniform %48
%47 = OpVariable  %49  Uniform
%51 = OpTypeStruct %24
%52 = OpTypePointer Uniform %51
%50 = OpVariable  %52  Uniform
%54 = OpTypeStruct %25
%55 = OpTypePointer Uniform %54
%53 = OpVariable  %55  Uniform
%57 = OpTypePointer UniformConstant %27
%56 = OpVariable  %57  UniformConstant
%59 = OpTypePointer UniformConstant %28
%58 = OpVariable  %59  UniformConstant
%60 = OpVariable  %57  UniformConstant
%61 = OpVariable  %59  UniformConstant
%65 = OpTypeFunction %4 %4
%66 = OpConstant  %5  34.0
%67 = OpConstant  %5  1.0
%68 = OpConstant  %5  289.0
%77 = OpTypePointer Function %6
%78 = OpConstantNull  %6
%80 = OpConstantNull  %6
%82 = OpTypePointer Function %7
%83 = OpConstantNull  %7
%85 = OpTypePointer Function %4
%86 = OpConstantNull  %4
%90 = OpTypeFunction %5 %6
%91 = OpConstant  %5  0.21132487
%92 = OpConstant  %5  0.36602542
%93 = OpConstant  %5  -0.57735026
%94 = OpConstant  %5  0.024390243
%95 = OpConstant  %5  0.0
%96 = OpConstant  %5  0.5
%97 = OpConstant  %5  2.0
%98 = OpConstant  %5  1.7928429
%99 = OpConstant  %5  0.85373473
%100 = OpConstant  %5  130.0
%119 = OpTypeBool
%122 = OpTypeVector %119 2
%133 = OpTypePointer Function %5
%215 = OpConstantNull  %6
%217 = OpTypePointer Function %5
%218 = OpConstantNull  %5
%220 = OpConstantNull  %5
%222 = OpTypePointer Function %8
%223 = OpConstantNull  %8
%227 = OpConstant  %5  0.01
%228 = OpConstant  %5  100.0
%268 = OpTypeFunction %4 %6 %6
%281 = OpTypeFunction %14 %6 %6
%282 = OpConstant  %5  0.1
%283 = OpConstant  %5  -0.1
%314 = OpTypeFunction %6 %8 %10 %11
%331 = OpTypeFunction %4 %6
%332 = OpConstant  %5  23.0
%333 = OpConstant  %5  32.0
%334 = OpConstant  %5  -43.0
%335 = OpConstant  %5  3.0
%353 = OpTypePointer Input %19
%352 = OpVariable  %353  Input
%356 = OpTypeFunction %2
%357 = OpTypePointer Uniform %13
%359 = OpConstant  %8  6
%362 = OpTypePointer Uniform %10
%365 = OpTypePointer Uniform %11
%369 = OpTypePointer StorageBuffer %15
%370 = OpTypePointer StorageBuffer %14
%371 = OpTypePointer Uniform %6
%378 = OpTypePointer Uniform %8
%399 = OpTypePointer StorageBuffer %17
%400 = OpTypePointer StorageBuffer %8
%414 = OpTypePointer Input %8
%413 = OpVariable  %414  Input
%417 = OpTypePointer Output %8
%416 = OpVariable  %417  Output
%419 = OpTypePointer Output %7
%418 = OpVariable  %419  Output
%421 = OpTypePointer Output %6
%420 = OpVariable  %421  Output
%423 = OpTypePointer Uniform %20
%425 = OpConstant  %5  -1.0
%440 = OpTypePointer Uniform %8
%459 = OpConstantNull  %5
%461 = OpConstantNull  %8
%464 = OpVariable  %414  Input
%467 = OpTypePointer Input %7
%466 = OpVariable  %467  Input
%470 = OpTypePointer Input %6
%469 = OpVariable  %470  Input
%472 = OpVariable  %417  Output
%473 = OpVariable  %417  Output
%476 = OpConstant  %5  6.0
%557 = OpTypePointer Input %4
%556 = OpVariable  %557  Input
%559 = OpVariable  %557  Input
%561 = OpVariable  %419  Output
%563 = OpTypePointer Output %4
%562 = OpVariable  %563  Output
%564 = OpVariable  %563  Output
%566 = OpTypePointer Uniform %24
%569 = OpTypePointer Uniform %23
%582 = OpConstantNull  %4
%585 = OpVariable  %467  Input
%587 = OpVariable  %557  Input
%589 = OpVariable  %557  Input
%591 = OpVariable  %419  Output
%594 = OpTypePointer Uniform %25
%596 = OpConstant  %5  0.7
%597 = OpConstant  %5  0.2
%616 = OpTypePointer Uniform %4
%625 = OpTypePointer Uniform %7
%64 = OpFunction  %4  None %65
%63 = OpFunctionParameter  %4
%62 = OpLabel
OpBranch %69
%69 = OpLabel
OpLine %3 10 52
%70 = OpVectorTimesScalar  %4  %63 %66
OpLine %3 10 50
%71 = OpCompositeConstruct  %4  %67 %67 %67
%72 = OpFAdd  %4  %70 %71
%73 = OpFMul  %4  %72 %63
OpLine %3 10 49
%74 = OpCompositeConstruct  %4  %68 %68 %68
%75 = OpFRem  %4  %73 %74
OpReturnValue %75
OpFunctionEnd
%89 = OpFunction  %5  None %90
%88 = OpFunctionParameter  %6
%87 = OpLabel
%79 = OpVariable  %77  Function %80
%84 = OpVariable  %85  Function %86
%76 = OpVariable  %77  Function %78
%81 = OpVariable  %82  Function %83
OpBranch %101
%101 = OpLabel
OpLine %3 13 13
%102 = OpCompositeConstruct  %7  %91 %92 %93 %94
OpLine %3 14 24
%103 = OpCompositeConstruct  %6  %92 %92
%104 = OpDot  %5  %88 %103
%105 = OpCompositeConstruct  %6  %104 %104
%106 = OpFAdd  %6  %88 %105
%107 = OpExtInst  %6  %1 Floor %106
OpLine %3 14 5
OpStore %76 %107
OpLine %3 15 14
%108 = OpLoad  %6  %76
%109 = OpFSub  %6  %88 %108
%110 = OpLoad  %6  %76
%111 = OpCompositeConstruct  %6  %91 %91
%112 = OpDot  %5  %110 %111
%113 = OpCompositeConstruct  %6  %112 %112
%114 = OpFAdd  %6  %109 %113
OpLine %3 17 32
%115 = OpCompositeConstruct  %6  %67 %95
OpLine %3 17 25
%116 = OpCompositeConstruct  %6  %95 %67
%117 = OpCompositeExtract  %5  %114 0
%118 = OpCompositeExtract  %5  %114 1
%120 = OpFOrdLessThan  %119  %117 %118
%123 = OpCompositeConstruct  %122  %120 %120
%121 = OpSelect  %6  %123 %116 %115
OpLine %3 17 5
OpStore %79 %121
OpLine %3 18 26
%124 = OpVectorShuffle  %7  %114 %114 0 1 0 1
%125 = OpCompositeConstruct  %7  %91 %91 %93 %93
%126 = OpFAdd  %7  %124 %125
%127 = OpLoad  %6  %79
OpLine %3 18 26
%128 = OpCompositeConstruct  %7  %127 %95 %95
%129 = OpFSub  %7  %126 %128
OpLine %3 18 5
OpStore %81 %129
OpLine %3 1 1
%130 = OpLoad  %6  %76
OpLine %3 19 9
%131 = OpCompositeConstruct  %6  %68 %68
%132 = OpFRem  %6  %130 %131
OpLine %3 19 5
OpStore %76 %132
OpLine %3 20 31
%134 = OpAccessChain  %133  %76 %34
%135 = OpLoad  %5  %134
OpLine %3 20 51
%136 = OpAccessChain  %133  %79 %34
%137 = OpLoad  %5  %136
OpLine %3 20 31
%138 = OpCompositeConstruct  %4  %95 %137 %67
%139 = OpCompositeConstruct  %4  %135 %135 %135
%140 = OpFAdd  %4  %139 %138
OpLine %3 20 22
%141 = OpFunctionCall  %4  %64 %140
OpLine %3 20 22
%142 = OpAccessChain  %133  %76 %33
%143 = OpLoad  %5  %142
%144 = OpCompositeConstruct  %4  %143 %143 %143
%145 = OpFAdd  %4  %141 %144
OpLine %3 20 84
%146 = OpAccessChain  %133  %79 %33
%147 = OpLoad  %5  %146
OpLine %3 20 22
%148 = OpCompositeConstruct  %4  %95 %147 %67
%149 = OpFAdd  %4  %145 %148
OpLine %3 20 13
%150 = OpFunctionCall  %4  %64 %149
OpLine %3 21 28
%151 = OpDot  %5  %114 %114
%152 = OpLoad  %7  %81
%153 = OpVectorShuffle  %6  %152 %152 0 1
%154 = OpLoad  %7  %81
%155 = OpVectorShuffle  %6  %154 %154 0 1
%156 = OpDot  %5  %153 %155
%157 = OpLoad  %7  %81
%158 = OpVectorShuffle  %6  %157 %157 2 3
%159 = OpLoad  %7  %81
%160 = OpVectorShuffle  %6  %159 %159 2 3
%161 = OpDot  %5  %158 %160
%162 = OpCompositeConstruct  %4  %151 %156 %161
%163 = OpCompositeConstruct  %4  %96 %96 %96
%164 = OpFSub  %4  %163 %162
OpLine %3 21 24
%165 = OpCompositeConstruct  %4  %95 %95 %95
%166 = OpExtInst  %4  %1 FMax %164 %165
OpLine %3 21 5
OpStore %84 %166
OpLine %3 22 9
%167 = OpLoad  %4  %84
%168 = OpLoad  %4  %84
%169 = OpFMul  %4  %167 %168
OpLine %3 22 5
OpStore %84 %169
OpLine %3 23 9
%170 = OpLoad  %4  %84
%171 = OpLoad  %4  %84
%172 = OpFMul  %4  %170 %171
OpLine %3 23 5
OpStore %84 %172
OpLine %3 24 13
%173 = OpCompositeConstruct  %4  %94 %94 %94
%174 = OpFMul  %4  %150 %173
%175 = OpExtInst  %4  %1 Fract %174
%176 = OpVectorTimesScalar  %4  %175 %97
OpLine %3 24 13
%177 = OpCompositeConstruct  %4  %67 %67 %67
%178 = OpFSub  %4  %176 %177
OpLine %3 25 13
%179 = OpExtInst  %4  %1 FAbs %178
OpLine %3 25 13
%180 = OpCompositeConstruct  %4  %96 %96 %96
%181 = OpFSub  %4  %179 %180
OpLine %3 26 14
%182 = OpCompositeConstruct  %4  %96 %96 %96
%183 = OpFAdd  %4  %178 %182
%184 = OpExtInst  %4  %1 Floor %183
OpLine %3 27 14
%185 = OpFSub  %4  %178 %184
OpLine %3 1 1
%186 = OpLoad  %4  %84
OpLine %3 28 9
%187 = OpFMul  %4  %185 %185
%188 = OpFMul  %4  %181 %181
%189 = OpFAdd  %4  %187 %188
%190 = OpVectorTimesScalar  %4  %189 %99
%191 = OpCompositeConstruct  %4  %98 %98 %98
%192 = OpFSub  %4  %191 %190
%193 = OpFMul  %4  %186 %192
OpLine %3 28 5
OpStore %84 %193
OpLine %3 29 13
%194 = OpCompositeExtract  %5  %185 0
%195 = OpCompositeExtract  %5  %114 0
%196 = OpFMul  %5  %194 %195
%197 = OpCompositeExtract  %5  %181 0
%198 = OpCompositeExtract  %5  %114 1
%199 = OpFMul  %5  %197 %198
%200 = OpFAdd  %5  %196 %199
%201 = OpVectorShuffle  %6  %185 %185 1 2
%202 = OpLoad  %7  %81
%203 = OpVectorShuffle  %6  %202 %202 0 2
%204 = OpFMul  %6  %201 %203
%205 = OpVectorShuffle  %6  %181 %181 1 2
%206 = OpLoad  %7  %81
%207 = OpVectorShuffle  %6  %206 %206 1 3
%208 = OpFMul  %6  %205 %207
%209 = OpFAdd  %6  %204 %208
%210 = OpCompositeConstruct  %4  %200 %209
OpLine %3 30 12
%211 = OpLoad  %4  %84
%212 = OpDot  %5  %211 %210
%213 = OpFMul  %5  %100 %212
OpReturnValue %213
OpFunctionEnd
%226 = OpFunction  %5  None %90
%225 = OpFunctionParameter  %6
%224 = OpLabel
%216 = OpVariable  %217  Function %218
%221 = OpVariable  %222  Function %223
%214 = OpVariable  %77  Function %215
%219 = OpVariable  %217  Function %220
OpBranch %229
%229 = OpLabel
OpLine %3 36 13
%230 = OpVectorTimesScalar  %6  %225 %227
OpLine %3 36 5
OpStore %214 %230
OpLine %3 37 5
OpStore %216 %95
OpLine %3 38 5
OpStore %219 %96
OpLine %3 39 17
%231 = OpCompositeConstruct  %6  %228 %228
OpLine %3 40 24
%232 = OpExtInst  %5  %1 Cos %96
OpLine %3 40 14
%233 = OpExtInst  %5  %1 Sin %96
%234 = OpCompositeConstruct  %6  %232 %233
OpLine %3 41 15
%235 = OpFNegate  %5  %233
%236 = OpCompositeConstruct  %6  %232 %233
%237 = OpCompositeConstruct  %6  %235 %232
%238 = OpCompositeConstruct  %9  %236 %237
OpLine %3 43 10
OpStore %221 %33
OpBranch %239
%239 = OpLabel
OpLine %3 43 5
OpLoopMerge %240 %242 None
OpBranch %241
%241 = OpLabel
OpLine %3 43 22
%243 = OpLoad  %8  %221
%244 = OpULessThan  %119  %243 %38
OpLine %3 43 21
OpSelectionMerge %245 None
OpBranchConditional %244 %245 %246
%246 = OpLabel
OpBranch %240
%245 = OpLabel
OpBranch %247
%247 = OpLabel
OpLine %3 1 1
%249 = OpLoad  %5  %216
%250 = OpLoad  %5  %219
%251 = OpLoad  %6  %214
OpLine %3 44 21
%252 = OpFunctionCall  %5  %89 %251
OpLine %3 44 13
%253 = OpFMul  %5  %250 %252
%254 = OpFAdd  %5  %249 %253
OpLine %3 44 9
OpStore %216 %254
OpLine %3 45 13
%255 = OpLoad  %6  %214
%256 = OpMatrixTimesVector  %6  %238 %255
OpLine %3 45 13
%257 = OpVectorTimesScalar  %6  %256 %97
%258 = OpFAdd  %6  %257 %231
OpLine %3 45 9
OpStore %214 %258
OpLine %3 1 1
%259 = OpLoad  %5  %219
OpLine %3 46 13
%260 = OpFMul  %5  %259 %96
OpLine %3 46 9
OpStore %219 %260
OpBranch %248
%248 = OpLabel
OpBranch %242
%242 = OpLabel
OpLine %3 1 1
%261 = OpLoad  %8  %221
OpLine %3 43 43
%262 = OpIAdd  %8  %261 %34
OpLine %3 43 39
OpStore %221 %262
OpBranch %239
%240 = OpLabel
OpLine %3 1 1
%263 = OpLoad  %5  %216
OpReturnValue %263
OpFunctionEnd
%267 = OpFunction  %4  None %268
%265 = OpFunctionParameter  %6
%266 = OpFunctionParameter  %6
%264 = OpLabel
OpBranch %269
%269 = OpLabel
OpLine %3 77 9
%270 = OpCompositeExtract  %5  %265 0
%271 = OpCompositeExtract  %5  %266 0
%272 = OpCompositeExtract  %5  %266 1
OpLine %3 78 49
%273 = OpFunctionCall  %5  %226 %265
OpLine %3 76 12
%274 = OpExtInst  %5  %1 FMix %271 %272 %273
%275 = OpCompositeExtract  %5  %265 1
%276 = OpCompositeConstruct  %4  %270 %274 %275
OpReturnValue %276
OpFunctionEnd
%280 = OpFunction  %14  None %281
%278 = OpFunctionParameter  %6
%279 = OpFunctionParameter  %6
%277 = OpLabel
OpBranch %284
%284 = OpLabel
OpLine %3 84 13
%285 = OpFunctionCall  %4  %267 %278 %279
OpLine %3 86 29
%286 = OpCompositeConstruct  %6  %282 %95
%287 = OpFAdd  %6  %278 %286
OpLine %3 86 15
%288 = OpFunctionCall  %4  %267 %287 %279
OpLine %3 86 15
%289 = OpFSub  %4  %288 %285
OpLine %3 87 29
%290 = OpCompositeConstruct  %6  %95 %282
%291 = OpFAdd  %6  %278 %290
OpLine %3 87 15
%292 = OpFunctionCall  %4  %267 %291 %279
OpLine %3 87 15
%293 = OpFSub  %4  %292 %285
OpLine %3 88 29
%294 = OpCompositeConstruct  %6  %283 %95
%295 = OpFAdd  %6  %278 %294
OpLine %3 88 15
%296 = OpFunctionCall  %4  %267 %295 %279
OpLine %3 88 15
%297 = OpFSub  %4  %296 %285
OpLine %3 89 29
%298 = OpCompositeConstruct  %6  %95 %283
%299 = OpFAdd  %6  %278 %298
OpLine %3 89 15
%300 = OpFunctionCall  %4  %267 %299 %279
OpLine %3 89 15
%301 = OpFSub  %4  %300 %285
OpLine %3 91 14
%302 = OpExtInst  %4  %1 Cross %293 %289
%303 = OpExtInst  %4  %1 Normalize %302
OpLine %3 92 14
%304 = OpExtInst  %4  %1 Cross %301 %297
%305 = OpExtInst  %4  %1 Normalize %304
OpLine %3 94 14
%306 = OpFAdd  %4  %303 %305
OpLine %3 94 13
%307 = OpVectorTimesScalar  %4  %306 %96
OpLine %3 96 12
%308 = OpCompositeConstruct  %14  %285 %307
OpReturnValue %308
OpFunctionEnd
%313 = OpFunction  %6  None %314
%310 = OpFunctionParameter  %8
%311 = OpFunctionParameter  %10
%312 = OpFunctionParameter  %11
%309 = OpLabel
OpBranch %315
%315 = OpLabel
OpLine %3 101 9
%316 = OpConvertUToF  %5  %310
%317 = OpCompositeExtract  %8  %311 0
OpLine %3 101 9
%318 = OpIAdd  %8  %317 %34
%319 = OpConvertUToF  %5  %318
%320 = OpFRem  %5  %316 %319
%321 = OpCompositeExtract  %8  %311 0
OpLine %3 100 12
%322 = OpIAdd  %8  %321 %34
%323 = OpUDiv  %8  %310 %322
%324 = OpConvertUToF  %5  %323
%325 = OpCompositeConstruct  %6  %320 %324
%326 = OpConvertSToF  %6  %312
%327 = OpFAdd  %6  %325 %326
OpReturnValue %327
OpFunctionEnd
%330 = OpFunction  %4  None %331
%329 = OpFunctionParameter  %6
%328 = OpLabel
OpBranch %336
%336 = OpLabel
OpLine %3 270 9
%337 = OpFunctionCall  %5  %89 %329
OpLine %3 270 9
%338 = OpFMul  %5  %337 %96
OpLine %3 270 9
%339 = OpFAdd  %5  %338 %96
OpLine %3 271 17
%340 = OpCompositeConstruct  %6  %332 %333
%341 = OpFAdd  %6  %329 %340
OpLine %3 271 9
%342 = OpFunctionCall  %5  %89 %341
OpLine %3 271 9
%343 = OpFMul  %5  %342 %96
OpLine %3 271 9
%344 = OpFAdd  %5  %343 %96
OpLine %3 272 17
%345 = OpCompositeConstruct  %6  %334 %335
%346 = OpFAdd  %6  %329 %345
OpLine %3 272 9
%347 = OpFunctionCall  %5  %89 %346
OpLine %3 272 9
%348 = OpFMul  %5  %347 %96
OpLine %3 269 12
%349 = OpFAdd  %5  %348 %96
%350 = OpCompositeConstruct  %4  %339 %344 %349
OpReturnValue %350
OpFunctionEnd
%355 = OpFunction  %2  None %356
%351 = OpLabel
%354 = OpLoad  %19  %352
%358 = OpAccessChain  %357  %40 %33
OpBranch %360
%360 = OpLabel
OpLine %3 111 22
%361 = OpCompositeExtract  %8  %354 0
OpLine %3 113 36
%363 = OpAccessChain  %362  %358 %33
%364 = OpLoad  %10  %363
OpLine %3 113 59
%366 = OpAccessChain  %365  %358 %34
%367 = OpLoad  %11  %366
OpLine %3 113 13
%368 = OpFunctionCall  %6  %313 %361 %364 %367
OpLine %3 115 5
OpLine %3 115 51
%372 = OpAccessChain  %371  %358 %35
%373 = OpLoad  %6  %372
OpLine %3 115 33
%374 = OpFunctionCall  %14  %280 %368 %373
OpLine %3 115 5
%375 = OpAccessChain  %370  %43 %33 %361
OpStore %375 %374
OpLine %3 118 23
%376 = OpCompositeExtract  %8  %354 0
OpLine %3 118 23
%377 = OpIMul  %8  %376 %359
OpLine %3 120 25
%379 = OpAccessChain  %378  %358 %33 %33
%380 = OpLoad  %8  %379
OpLine %3 120 25
%381 = OpAccessChain  %378  %358 %33 %34
%382 = OpLoad  %8  %381
%383 = OpIMul  %8  %380 %382
OpLine %3 120 9
%384 = OpIMul  %8  %383 %359
%385 = OpUGreaterThanEqual  %119  %377 %384
OpLine %3 120 5
OpSelectionMerge %386 None
OpBranchConditional %385 %387 %386
%387 = OpLabel
OpReturn
%386 = OpLabel
OpLine %3 122 28
%388 = OpCompositeExtract  %8  %354 0
OpLine %3 122 15
%389 = OpAccessChain  %378  %358 %33 %33
%390 = OpLoad  %8  %389
%391 = OpUDiv  %8  %388 %390
%392 = OpIAdd  %8  %361 %391
OpLine %3 123 15
%393 = OpIAdd  %8  %392 %34
OpLine %3 124 15
%394 = OpAccessChain  %378  %358 %33 %33
%395 = OpLoad  %8  %394
%396 = OpIAdd  %8  %392 %395
OpLine %3 124 15
%397 = OpIAdd  %8  %396 %34
OpLine %3 125 15
%398 = OpIAdd  %8  %397 %34
OpLine %3 127 5
OpLine %3 127 5
%401 = OpAccessChain  %400  %45 %33 %377
OpStore %401 %392
OpLine %3 128 5
OpLine %3 128 5
%402 = OpIAdd  %8  %377 %34
OpLine %3 128 5
%403 = OpAccessChain  %400  %45 %33 %402
OpStore %403 %397
OpLine %3 129 5
OpLine %3 129 5
%404 = OpIAdd  %8  %377 %35
OpLine %3 129 5
%405 = OpAccessChain  %400  %45 %33 %404
OpStore %405 %398
OpLine %3 130 5
OpLine %3 130 5
%406 = OpIAdd  %8  %377 %36
OpLine %3 130 5
%407 = OpAccessChain  %400  %45 %33 %406
OpStore %407 %392
OpLine %3 131 5
OpLine %3 131 5
%408 = OpIAdd  %8  %377 %37
OpLine %3 131 5
%409 = OpAccessChain  %400  %45 %33 %408
OpStore %409 %398
OpLine %3 132 5
OpLine %3 132 5
%410 = OpIAdd  %8  %377 %38
OpLine %3 132 5
%411 = OpAccessChain  %400  %45 %33 %410
OpStore %411 %393
OpReturn
OpFunctionEnd
%422 = OpFunction  %2  None %356
%412 = OpLabel
%415 = OpLoad  %8  %413
%424 = OpAccessChain  %423  %47 %33
OpBranch %426
%426 = OpLabel
OpLine %3 161 19
%427 = OpIAdd  %8  %415 %35
OpLine %3 161 18
%428 = OpUDiv  %8  %427 %36
OpLine %3 161 13
%429 = OpUMod  %8  %428 %35
%430 = OpConvertUToF  %5  %429
OpLine %3 162 19
%431 = OpIAdd  %8  %415 %34
OpLine %3 162 18
%432 = OpUDiv  %8  %431 %36
OpLine %3 162 13
%433 = OpUMod  %8  %432 %35
%434 = OpConvertUToF  %5  %433
OpLine %3 163 14
%435 = OpCompositeConstruct  %6  %430 %434
OpLine %3 165 30
%436 = OpVectorTimesScalar  %6  %435 %97
%437 = OpCompositeConstruct  %6  %425 %425
%438 = OpFAdd  %6  %437 %436
OpLine %3 165 20
%439 = OpCompositeConstruct  %7  %438 %95 %67
OpLine %3 168 21
%441 = OpAccessChain  %440  %424 %36
%442 = OpLoad  %8  %441
%443 = OpConvertUToF  %5  %442
%444 = OpFMul  %5  %430 %443
OpLine %3 168 17
%445 = OpAccessChain  %440  %424 %36
%446 = OpLoad  %8  %445
%447 = OpConvertUToF  %5  %446
%448 = OpFMul  %5  %434 %447
%449 = OpFAdd  %5  %444 %448
%450 = OpConvertFToU  %8  %449
OpLine %3 168 17
%451 = OpAccessChain  %440  %424 %37
%452 = OpLoad  %8  %451
%453 = OpIAdd  %8  %450 %452
OpLine %3 170 12
%454 = OpCompositeConstruct  %21  %453 %439 %435
%455 = OpCompositeExtract  %8  %454 0
OpStore %416 %455
%456 = OpCompositeExtract  %7  %454 1
OpStore %418 %456
%457 = OpCompositeExtract  %6  %454 2
OpStore %420 %457
OpReturn
OpFunctionEnd
%474 = OpFunction  %2  None %356
%462 = OpLabel
%458 = OpVariable  %217  Function %459
%460 = OpVariable  %222  Function %461
%465 = OpLoad  %8  %464
%468 = OpLoad  %7  %466
%471 = OpLoad  %6  %469
%463 = OpCompositeConstruct  %21  %465 %468 %471
%475 = OpAccessChain  %423  %47 %33
OpBranch %477
%477 = OpLabel
OpLine %3 181 17
%478 = OpCompositeExtract  %6  %463 2
%479 = OpCompositeExtract  %5  %478 0
OpLine %3 181 17
%480 = OpAccessChain  %440  %475 %36
%481 = OpLoad  %8  %480
%482 = OpConvertUToF  %5  %481
%483 = OpFMul  %5  %479 %482
%484 = OpCompositeExtract  %6  %463 2
%485 = OpCompositeExtract  %5  %484 1
OpLine %3 181 70
%486 = OpAccessChain  %440  %475 %36
%487 = OpLoad  %8  %486
OpLine %3 181 13
%488 = OpAccessChain  %440  %475 %36
%489 = OpLoad  %8  %488
%490 = OpIMul  %8  %487 %489
%491 = OpConvertUToF  %5  %490
%492 = OpFMul  %5  %485 %491
%493 = OpFAdd  %5  %483 %492
%494 = OpConvertFToU  %8  %493
OpLine %3 181 13
%495 = OpAccessChain  %440  %475 %37
%496 = OpLoad  %8  %495
%497 = OpIAdd  %8  %494 %496
OpLine %3 182 32
%498 = OpConvertUToF  %5  %497
OpLine %3 182 22
%499 = OpFDiv  %5  %498 %476
%500 = OpExtInst  %5  %1 Floor %499
%501 = OpConvertFToU  %8  %500
OpLine %3 183 22
%502 = OpUMod  %8  %497 %359
OpLine %3 185 36
%503 = OpAccessChain  %362  %475 %33
%504 = OpLoad  %10  %503
OpLine %3 185 57
%505 = OpAccessChain  %365  %475 %34
%506 = OpLoad  %11  %505
OpLine %3 185 13
%507 = OpFunctionCall  %6  %313 %501 %504 %506
OpLine %3 186 31
%508 = OpAccessChain  %371  %475 %35
%509 = OpLoad  %6  %508
OpLine %3 186 13
%510 = OpFunctionCall  %14  %280 %507 %509
OpLine %3 188 5
OpStore %458 %95
OpLine %3 190 5
OpSelectionMerge %511 None
OpSwitch %502 %518 0 %512 1 %513 2 %514 3 %515 4 %516 5 %517
%512 = OpLabel
OpLine %3 191 37
%519 = OpCompositeExtract  %4  %510 0
%520 = OpCompositeExtract  %5  %519 0
OpLine %3 191 20
OpStore %458 %520
OpBranch %511
%513 = OpLabel
OpLine %3 192 37
%521 = OpCompositeExtract  %4  %510 0
%522 = OpCompositeExtract  %5  %521 1
OpLine %3 192 20
OpStore %458 %522
OpBranch %511
%514 = OpLabel
OpLine %3 193 37
%523 = OpCompositeExtract  %4  %510 0
%524 = OpCompositeExtract  %5  %523 2
OpLine %3 193 20
OpStore %458 %524
OpBranch %511
%515 = OpLabel
OpLine %3 194 37
%525 = OpCompositeExtract  %4  %510 1
%526 = OpCompositeExtract  %5  %525 0
OpLine %3 194 20
OpStore %458 %526
OpBranch %511
%516 = OpLabel
OpLine %3 195 37
%527 = OpCompositeExtract  %4  %510 1
%528 = OpCompositeExtract  %5  %527 1
OpLine %3 195 20
OpStore %458 %528
OpBranch %511
%517 = OpLabel
OpLine %3 196 37
%529 = OpCompositeExtract  %4  %510 1
%530 = OpCompositeExtract  %5  %529 2
OpLine %3 196 20
OpStore %458 %530
OpBranch %511
%518 = OpLabel
OpBranch %511
%511 = OpLabel
OpLine %3 200 15
%531 = OpAccessChain  %378  %475 %33 %33
%532 = OpLoad  %8  %531
%533 = OpUDiv  %8  %501 %532
%534 = OpIAdd  %8  %501 %533
OpLine %3 201 15
%535 = OpIAdd  %8  %534 %34
OpLine %3 202 15
%536 = OpAccessChain  %378  %475 %33 %33
%537 = OpLoad  %8  %536
%538 = OpIAdd  %8  %534 %537
OpLine %3 202 15
%539 = OpIAdd  %8  %538 %34
OpLine %3 203 15
%540 = OpIAdd  %8  %539 %34
OpLine %3 205 5
OpStore %460 %33
OpLine %3 206 5
OpSelectionMerge %541 None
OpSwitch %502 %546 0 %542 3 %542 2 %543 4 %543 1 %544 5 %545
%542 = OpLabel
OpLine %3 207 24
OpStore %460 %534
OpBranch %541
%543 = OpLabel
OpLine %3 208 24
OpStore %460 %540
OpBranch %541
%544 = OpLabel
OpLine %3 209 20
OpStore %460 %539
OpBranch %541
%545 = OpLabel
OpLine %3 210 20
OpStore %460 %535
OpBranch %541
%546 = OpLabel
OpBranch %541
%541 = OpLabel
OpLine %3 213 13
%547 = OpCompositeExtract  %8  %463 0
OpLine %3 213 5
OpStore %460 %547
OpLine %3 222 27
%548 = OpLoad  %5  %458
%549 = OpBitcast  %8  %548
OpLine %3 223 12
%550 = OpLoad  %8  %460
%551 = OpCompositeConstruct  %22  %549 %550
%552 = OpCompositeExtract  %8  %551 0
OpStore %472 %552
%553 = OpCompositeExtract  %8  %551 1
OpStore %473 %553
OpReturn
OpFunctionEnd
%565 = OpFunction  %2  None %356
%554 = OpLabel
%558 = OpLoad  %4  %556
%560 = OpLoad  %4  %559
%555 = OpCompositeConstruct  %14  %558 %560
%567 = OpAccessChain  %566  %50 %33
OpBranch %568
%568 = OpLabel
OpLine %3 254 25
%570 = OpAccessChain  %569  %567 %34
%571 = OpLoad  %23  %570
%572 = OpCompositeExtract  %4  %555 0
OpLine %3 254 25
%573 = OpCompositeConstruct  %7  %572 %67
%574 = OpMatrixTimesVector  %7  %571 %573
OpLine %3 255 18
%575 = OpCompositeExtract  %4  %555 1
OpLine %3 256 12
%576 = OpCompositeExtract  %4  %555 0
%577 = OpCompositeConstruct  %26  %574 %575 %576
%578 = OpCompositeExtract  %7  %577 0
OpStore %561 %578
%579 = OpCompositeExtract  %4  %577 1
OpStore %562 %579
%580 = OpCompositeExtract  %4  %577 2
OpStore %564 %580
OpReturn
OpFunctionEnd
%592 = OpFunction  %2  None %356
%583 = OpLabel
%581 = OpVariable  %85  Function %582
%586 = OpLoad  %7  %585
%588 = OpLoad  %4  %587
%590 = OpLoad  %4  %589
%584 = OpCompositeConstruct  %26  %586 %588 %590
%593 = OpAccessChain  %566  %50 %33
%595 = OpAccessChain  %594  %53 %33
OpBranch %598
%598 = OpLabel
OpLine %3 278 28
%599 = OpCompositeConstruct  %4  %95 %95 %95
OpLine %3 278 17
%600 = OpCompositeConstruct  %4  %282 %282 %282
%601 = OpCompositeExtract  %4  %584 2
%602 = OpExtInst  %4  %1 Fract %601
%603 = OpExtInst  %4  %1 SmoothStep %599 %600 %602
OpLine %3 278 5
OpStore %581 %603
OpLine %3 279 17
%604 = OpCompositeConstruct  %4  %96 %282 %596
OpLine %3 279 13
%605 = OpCompositeConstruct  %4  %597 %597 %597
%606 = OpAccessChain  %133  %581 %33
%607 = OpLoad  %5  %606
%608 = OpAccessChain  %133  %581 %34
%609 = OpLoad  %5  %608
%610 = OpFMul  %5  %607 %609
%611 = OpAccessChain  %133  %581 %35
%612 = OpLoad  %5  %611
%613 = OpFMul  %5  %610 %612
%614 = OpCompositeConstruct  %4  %613 %613 %613
%615 = OpExtInst  %4  %1 FMix %604 %605 %614
OpLine %3 279 5
OpStore %581 %615
OpLine %3 282 25
%617 = OpAccessChain  %616  %595 %34
%618 = OpLoad  %4  %617
%619 = OpVectorTimesScalar  %4  %618 %282
OpLine %3 284 21
%620 = OpAccessChain  %616  %595 %33
%621 = OpLoad  %4  %620
%622 = OpCompositeExtract  %4  %584 2
%623 = OpFSub  %4  %621 %622
%624 = OpExtInst  %4  %1 Normalize %623
OpLine %3 285 20
%626 = OpAccessChain  %625  %593 %33
%627 = OpLoad  %7  %626
%628 = OpVectorShuffle  %4  %627 %627 0 1 2
%629 = OpCompositeExtract  %4  %584 2
%630 = OpFSub  %4  %628 %629
%631 = OpExtInst  %4  %1 Normalize %630
OpLine %3 286 20
%632 = OpFAdd  %4  %631 %624
%633 = OpExtInst  %4  %1 Normalize %632
OpLine %3 288 32
%634 = OpCompositeExtract  %4  %584 1
%635 = OpDot  %5  %634 %624
OpLine %3 288 28
%636 = OpExtInst  %5  %1 FMax %635 %95
OpLine %3 289 25
%637 = OpAccessChain  %616  %595 %34
%638 = OpLoad  %4  %637
%639 = OpVectorTimesScalar  %4  %638 %636
OpLine %3 291 37
%640 = OpCompositeExtract  %4  %584 1
%641 = OpDot  %5  %640 %633
OpLine %3 291 33
%642 = OpExtInst  %5  %1 FMax %641 %95
OpLine %3 291 29
%643 = OpExtInst  %5  %1 Pow %642 %333
OpLine %3 292 26
%644 = OpAccessChain  %616  %595 %34
%645 = OpLoad  %4  %644
%646 = OpVectorTimesScalar  %4  %645 %643
OpLine %3 294 18
%647 = OpFAdd  %4  %619 %639
%648 = OpFAdd  %4  %647 %646
%649 = OpLoad  %4  %581
%650 = OpFMul  %4  %648 %649
OpLine %3 296 12
%651 = OpCompositeConstruct  %7  %650 %67
OpStore %591 %651
OpReturn
OpFunctionEnd